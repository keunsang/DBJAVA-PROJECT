<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
	<!-- 반드시 webapp/resources폴더이용 -->
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<!-- <resources mapping="/images/**"location="WEB-INF/views/images/" /> -->
	<resources mapping="/css/**" location="WEB-INF/views/css/" />
	<resources mapping="/js/**" location="WEB-INF/views/js/" />
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<context:component-scan
		base-package="com.zip.dbjava" />

	<!-- <beans:bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> 
		<beans:property name="jndiName" value="myOracle" /> <beans:property name="resourceRef" 
		value="true" /> </beans:bean> -->

	<!-- 로그를 출력하기 위해서 DriverSpy이용해서 jdbc설정: Connerction이 1개존재 -->
	<beans:bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName"
			value="net.sf.log4jdbc.DriverSpy" />
		<beans:property name="url"
			value="jdbc:log4jdbc:oracle:thin:@106.243.194.226:3000:xe" />
		<beans:property name="username" value="DBJAVA" />
		<beans:property name="password" value="1111" />
<<<<<<< HEAD
	</beans:bean> 

	<!-- sqlSessionFactory :: mybatis가 사용 -->
	<beans:bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="configLocation"
			value="classpath:com/board/lee/dao/mybatis-conf.xml" />
		<beans:property name="mapperLocations"
			value="classpath:com/**/mapper/*.xml" />
	</beans:bean> 
	<!-- DAO using -->
	 <beans:bean id="mLDao"
		class="org.mybatis.spring.mapper.MapperFactoryBean">
		<beans:property name="sqlSessionFactory"
			ref="sqlSessionFactory" />
		<beans:property name="mapperInterface"
			value="com.zip.dbjava.member.dao.MemberLogDao" />
	</beans:bean>

=======
	</beans:bean>


	<!--sqlSessionFactory :: mybatis가 사용 -->

	<!-- DAO using -->
	<!-- <beans:bean id="mDao" class="org.mybatis.spring.mapper.MapperFactoryBean"> 
		<beans:property name="sqlSessionFactory" ref="sqlSessionFactory" /> <beans:property 
		name="mapperInterface" value="com.board.lee.dao.IMemberDao" /> </beans:bean> 
		<beans:bean id="bDao" class="org.mybatis.spring.mapper.MapperFactoryBean"> 
		<beans:property name="sqlSessionFactory" ref="sqlSessionFactory" /> <beans:property 
		name="mapperInterface" value="com.board.lee.dao.IBoardDao" /> </beans:bean> -->
>>>>>>> 1d8c0f05d90cb3d7f1d41da81c9bd0e97870536e
	<!-- 트랜잭션 -->
	<!-- <beans:bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
		<beans:property name="dataSource" ref="dataSource" /> </beans:bean> -->
	<!-- @Transactional 어노테이션 사용을 위해 설정 -->
	<!-- 반드시 servlet-context.xml에 설정해야 함 root에 하면 안댐..ㅋ -->
	<tx:annotation-driven
		transaction-manager="transactionManager" />

	<!-- Interceptor 설정 -->
	<!-- <interceptors> <interceptor> mapping의 모든 요청은 Controller에 도착하기 전에 가로챈다. 
		<mapping path="/*" /> exclude-mapping의 요청은 가로채지 않는다. <exclude-mapping path="/" 
		/> 인터셉터 객체 생성 <beans:bean class="com.dbjava.userClass.SessionInterceptor" 
		/> </interceptor> </interceptors> -->

	<!-- 파일 업로드 설정 -->
	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="defaultEncoding" value="UTF-8" />
		<beans:property name="maxUploadSize" value="10000000" /> <!-- 10MB -->
		<beans:property name="maxInMemorySize" value="10000000" />
	</beans:bean>


</beans:beans>
